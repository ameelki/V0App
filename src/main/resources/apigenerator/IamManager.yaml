openapi: 3.0.1
info:
  title: Swagger UserEntity Management System
  version: 1.0.0
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  personId:
                    type: string
                    description: ID de la personne créée
                  user:
                    $ref: '#/components/schemas/UserSummary'

        '401':
          description: Unauthorized

    patch:
      tags:
        - user
      summary: Update user details or reset password
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Password reset successfully or user details updated
        '400':
          description: Bad Request (e.g., invalid email format or weak password)
        '404':
          description: User not found
        '500':
          description: Internal Server Error

  /user/{userId}/{tokenSubId}:
    put:
      tags:
        - user
      summary: Update user details by user ID and token sub ID
      operationId: updateUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to be updated
        - name: tokenSubId
          in: path
          required: true
          schema:
            type: string
          description: Token subject ID for additional validation or context
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User details updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSummary'
        '400':
          description: Bad Request (e.g., invalid data)
        '404':
          description: User not found
        '500':
          description: Internal Server Error

  /login:
    post:
      tags:
        - login
      summary: Get access token
      operationId: getToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginFormRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenAuthorization'
        '401':
          description: Unauthorized

  /usersList:
    get:
      tags:
        - user
      summary: Get list of users
      operationId: getUserList
      parameters:
        - name: Authorization
          in: header
          description: Bearer token for authorization
          required: true
          schema:
            type: string
            example: "Bearer YOUR_ACCESS_TOKEN"
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSummary'
        '401':
          description: Unauthorized

  /user/by-email:
    post:
      tags:
        - user
      summary: Get user details by email
      operationId: getUserByEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequest'
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSummaryWithoutSensitiveData'
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal Server Error

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: String
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: UserEntity Status
          format: int32
        cardidnumber:
          type: string
          description: Identification card number of the user
        address:
          $ref: '#/components/schemas/Address'
      xml:
        name: UserEntity

    Address:
      type: object
      properties:
        country:
          type: string
          description: Country of the user
        city:
          type: string
          description: City of the user
        street:
          type: string
          description: Street address of the user
        postalCode:
          type: string
          description: Postal code of the user

    LoginFormRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    AccessTokenAuthorization:
      type: object
      properties:
        accessToken:
          type: string
        tokenType:
          type: string
      example:
        accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        tokenType: "Bearer"

    UserSummary:
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
          description: Phone number of the user
        cardidnumber:
          type: string
          description: Identification card number of the user

    UserSummaryWithoutSensitiveData:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        cardidnumber:
          type: string
      description: User details excluding sensitive information like password and address

    PasswordResetRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email address of the user requesting password reset
        newPassword:
          type: string
          description: New password for the user
      required:
        - email
        - newPassword

    EmailRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email address of the user whose details are being retrieved
      required:
        - email
